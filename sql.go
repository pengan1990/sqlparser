// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	trigger           *Trigger
	definer           *Definer
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const LOW_PRIORITY = 57482
const QUICK = 57483
const BIT = 57484
const TINYINT = 57485
const SMALLINT = 57486
const MEDIUMINT = 57487
const INT = 57488
const INTEGER = 57489
const BIGINT = 57490
const INTNUM = 57491
const REAL = 57492
const DOUBLE = 57493
const FLOAT_TYPE = 57494
const DECIMAL = 57495
const NUMERIC = 57496
const TIME = 57497
const TIMESTAMP = 57498
const DATETIME = 57499
const YEAR = 57500
const CHAR = 57501
const VARCHAR = 57502
const BOOL = 57503
const CHARACTER = 57504
const VARBINARY = 57505
const NCHAR = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const GEOMETRY = 57517
const POINT = 57518
const LINESTRING = 57519
const POLYGON = 57520
const GEOMETRYCOLLECTION = 57521
const MULTIPOINT = 57522
const MULTILINESTRING = 57523
const MULTIPOLYGON = 57524
const NULLX = 57525
const AUTO_INCREMENT = 57526
const APPROXNUM = 57527
const SIGNED = 57528
const UNSIGNED = 57529
const ZEROFILL = 57530
const DATABASES = 57531
const TABLES = 57532
const VITESS_KEYSPACES = 57533
const VITESS_SHARDS = 57534
const VITESS_TABLETS = 57535
const VSCHEMA_TABLES = 57536
const EXTENDED = 57537
const FULL = 57538
const PROCESSLIST = 57539
const NAMES = 57540
const CHARSET = 57541
const GLOBAL = 57542
const SESSION = 57543
const ISOLATION = 57544
const LEVEL = 57545
const READ = 57546
const WRITE = 57547
const ONLY = 57548
const REPEATABLE = 57549
const COMMITTED = 57550
const UNCOMMITTED = 57551
const SERIALIZABLE = 57552
const CURRENT_TIMESTAMP = 57553
const DATABASE = 57554
const CURRENT_DATE = 57555
const CURRENT_TIME = 57556
const LOCALTIME = 57557
const LOCALTIMESTAMP = 57558
const UTC_DATE = 57559
const UTC_TIME = 57560
const UTC_TIMESTAMP = 57561
const REPLACE = 57562
const CONVERT = 57563
const CAST = 57564
const SUBSTR = 57565
const SUBSTRING = 57566
const GROUP_CONCAT = 57567
const SEPARATOR = 57568
const MATCH = 57569
const AGAINST = 57570
const BOOLEAN = 57571
const LANGUAGE = 57572
const WITH = 57573
const QUERY = 57574
const EXPANSION = 57575
const DEFINER = 57576
const AFTER = 57577
const ROW = 57578
const FOLLOWS = 57579
const PRECEDES = 57580
const BEFORE = 57581
const EACH = 57582
const AT = 57583
const UNUSED = 57584

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"LOW_PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"DEFINER",
	"AFTER",
	"ROW",
	"FOLLOWS",
	"PRECEDES",
	"BEFORE",
	"EACH",
	"AT",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	150, 280,
	151, 280,
	-2, 270,
	-1, 76,
	120, 779,
	-2, 60,
	-1, 241,
	109, 604,
	-2, 600,
	-1, 242,
	109, 605,
	-2, 601,
	-1, 311,
	80, 763,
	-2, 58,
	-1, 312,
	80, 724,
	-2, 59,
	-1, 317,
	80, 708,
	-2, 566,
	-1, 319,
	80, 745,
	-2, 568,
	-1, 582,
	52, 41,
	54, 41,
	-2, 43,
	-1, 720,
	109, 607,
	-2, 603,
	-1, 930,
	5, 28,
	-2, 412,
	-1, 955,
	5, 27,
	-2, 541,
	-1, 1186,
	5, 28,
	-2, 542,
	-1, 1232,
	5, 27,
	-2, 544,
	-1, 1298,
	5, 28,
	-2, 545,
}

const yyPrivate = 57344

const yyLast = 11345

var yyAct = [...]int{

	242, 316, 866, 460, 1289, 653, 1313, 1302, 782, 529,
	1243, 271, 1091, 818, 246, 800, 1119, 1192, 528, 3,
	1092, 1016, 822, 860, 974, 1065, 821, 846, 745, 922,
	783, 79, 576, 958, 235, 188, 220, 1088, 188, 214,
	755, 53, 752, 1023, 592, 1007, 963, 722, 462, 771,
	272, 47, 873, 468, 856, 591, 413, 563, 310, 474,
	904, 482, 188, 188, 79, 840, 219, 779, 188, 578,
	79, 832, 244, 229, 307, 52, 305, 878, 1258, 543,
	1257, 1303, 1304, 215, 216, 217, 218, 660, 1329, 298,
	1286, 659, 1285, 1312, 1327, 1296, 297, 1325, 47, 867,
	233, 1311, 574, 1295, 1083, 1180, 225, 417, 183, 179,
	180, 181, 302, 1252, 1114, 1115, 593, 442, 594, 248,
	1269, 495, 494, 504, 505, 497, 498, 499, 500, 501,
	502, 503, 496, 57, 1113, 506, 1125, 1126, 1127, 457,
	982, 813, 687, 981, 1130, 1128, 983, 814, 815, 688,
	998, 839, 1204, 847, 1221, 1169, 1066, 1167, 59, 60,
	61, 62, 63, 213, 296, 430, 453, 454, 1147, 1326,
	1324, 1290, 1250, 1044, 780, 1244, 431, 188, 447, 188,
	444, 301, 446, 834, 420, 188, 1068, 177, 1246, 1041,
	801, 803, 176, 188, 177, 1043, 666, 79, 79, 79,
	79, 834, 79, 834, 652, 973, 972, 443, 445, 79,
	971, 414, 415, 427, 192, 178, 518, 519, 1274, 182,
	1070, 1189, 1074, 1052, 1069, 938, 1067, 916, 694, 992,
	486, 1072, 1134, 437, 496, 449, 79, 506, 819, 506,
	1071, 691, 1048, 899, 471, 481, 729, 448, 448, 448,
	448, 1279, 448, 1073, 1075, 1245, 465, 469, 479, 448,
	727, 728, 726, 754, 802, 470, 480, 479, 1144, 1251,
	1249, 961, 595, 487, 481, 833, 47, 847, 1270, 426,
	831, 829, 1135, 481, 830, 1085, 772, 1042, 945, 1040,
	441, 515, 1031, 833, 517, 833, 188, 772, 656, 313,
	996, 1294, 1282, 188, 188, 188, 1129, 530, 476, 79,
	1300, 1210, 712, 714, 715, 79, 541, 713, 1047, 1209,
	1029, 527, 900, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 1011, 542, 544, 544, 544, 544, 544, 544,
	544, 544, 552, 553, 554, 555, 836, 433, 434, 435,
	746, 837, 747, 575, 499, 500, 501, 502, 503, 496,
	472, 50, 506, 516, 545, 546, 547, 548, 549, 550,
	551, 725, 697, 698, 1010, 999, 450, 451, 452, 1301,
	455, 583, 1280, 589, 1030, 1228, 239, 459, 935, 1035,
	1032, 1025, 1026, 1033, 1028, 1027, 504, 505, 497, 498,
	499, 500, 501, 502, 503, 496, 1034, 175, 506, 1207,
	1155, 889, 1037, 419, 934, 1008, 933, 79, 480, 479,
	1031, 1318, 301, 79, 1317, 888, 188, 1277, 188, 79,
	693, 188, 480, 479, 188, 481, 480, 479, 188, 675,
	79, 79, 79, 79, 79, 79, 79, 79, 1029, 481,
	1122, 1121, 893, 481, 79, 79, 913, 914, 915, 188,
	1021, 887, 993, 480, 479, 984, 692, 448, 295, 869,
	1087, 1308, 461, 448, 79, 700, 1236, 1287, 188, 448,
	481, 748, 480, 479, 79, 421, 672, 425, 720, 671,
	448, 448, 448, 448, 448, 448, 448, 448, 673, 481,
	663, 723, 1236, 461, 448, 448, 657, 699, 655, 884,
	881, 882, 1030, 880, 709, 710, 650, 1035, 1032, 1025,
	1026, 1033, 1028, 1027, 1236, 1237, 461, 79, 1201, 1200,
	1110, 461, 756, 758, 1034, 1188, 461, 21, 891, 894,
	1024, 1141, 1140, 1256, 313, 716, 701, 718, 774, 439,
	759, 764, 767, 1137, 1138, 1137, 1136, 773, 188, 928,
	461, 188, 188, 188, 188, 188, 530, 586, 47, 762,
	763, 560, 461, 188, 784, 886, 188, 432, 799, 424,
	188, 414, 531, 757, 461, 188, 188, 602, 601, 79,
	1255, 749, 750, 224, 759, 651, 776, 885, 1131, 769,
	1089, 658, 79, 959, 959, 757, 960, 665, 587, 724,
	585, 302, 302, 302, 302, 302, 1184, 560, 676, 677,
	678, 679, 680, 681, 682, 683, 575, 54, 804, 797,
	817, 1055, 684, 685, 890, 302, 520, 521, 522, 523,
	524, 525, 526, 848, 849, 850, 811, 810, 560, 805,
	806, 786, 787, 188, 789, 892, 79, 785, 79, 826,
	788, 960, 23, 807, 23, 585, 928, 188, 1143, 1139,
	188, 79, 985, 862, 928, 812, 842, 843, 844, 845,
	301, 301, 301, 301, 301, 928, 953, 808, 940, 954,
	937, 1231, 853, 854, 855, 301, 720, 588, 695, 50,
	1216, 858, 859, 959, 301, 559, 448, 23, 448, 50,
	226, 50, 841, 877, 261, 260, 263, 264, 265, 266,
	861, 448, 719, 262, 267, 1104, 988, 902, 903, 560,
	469, 939, 654, 936, 964, 965, 1124, 857, 723, 852,
	497, 498, 499, 500, 501, 502, 503, 496, 906, 905,
	506, 851, 925, 65, 50, 864, 926, 50, 1089, 1019,
	1018, 1012, 967, 930, 931, 932, 669, 458, 794, 970,
	917, 792, 941, 795, 918, 707, 793, 947, 969, 948,
	949, 950, 951, 565, 568, 569, 570, 566, 791, 567,
	571, 790, 929, 964, 965, 1323, 760, 761, 955, 1310,
	1051, 796, 768, 569, 570, 79, 901, 946, 188, 230,
	231, 475, 1322, 911, 910, 463, 775, 1003, 777, 778,
	944, 600, 79, 440, 313, 473, 995, 464, 1284, 1283,
	956, 957, 1229, 989, 870, 968, 872, 823, 1182, 1217,
	976, 871, 978, 668, 986, 573, 724, 227, 228, 897,
	475, 909, 1215, 1214, 221, 1263, 54, 979, 302, 908,
	1002, 222, 1004, 1005, 1006, 79, 79, 1262, 79, 1219,
	1000, 1001, 960, 477, 1271, 721, 1205, 690, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 874, 875, 876, 58, 79, 1009, 56,
	188, 188, 990, 991, 584, 51, 1, 422, 188, 1020,
	977, 662, 423, 72, 868, 1015, 448, 79, 883, 1022,
	1288, 270, 1242, 1118, 828, 1036, 820, 301, 412, 64,
	719, 1063, 565, 568, 569, 570, 566, 1278, 567, 571,
	720, 827, 1248, 1203, 835, 997, 838, 448, 1123, 1059,
	1281, 994, 75, 607, 605, 606, 604, 79, 79, 609,
	1058, 1077, 1090, 1076, 608, 603, 1093, 200, 784, 1064,
	912, 308, 572, 596, 784, 1095, 863, 478, 1109, 66,
	1086, 1039, 1098, 1038, 1084, 315, 79, 879, 79, 79,
	1100, 418, 1046, 686, 898, 1101, 1102, 456, 202, 1103,
	1099, 514, 1105, 907, 980, 1094, 314, 47, 1096, 696,
	1117, 1112, 1116, 188, 1132, 1133, 467, 927, 1111, 188,
	188, 1261, 1106, 1107, 1108, 79, 1218, 943, 540, 770,
	247, 711, 259, 942, 256, 258, 257, 702, 79, 188,
	952, 488, 245, 237, 1014, 79, 300, 556, 564, 562,
	561, 966, 962, 79, 299, 1054, 188, 823, 1179, 1268,
	706, 25, 1159, 1148, 55, 232, 19, 18, 17, 1161,
	20, 16, 15, 14, 29, 1045, 1150, 13, 303, 1153,
	1170, 1171, 1172, 1156, 12, 1175, 11, 10, 1157, 9,
	8, 7, 6, 5, 1165, 4, 223, 22, 1185, 1186,
	1187, 2, 1190, 1017, 0, 79, 302, 79, 79, 79,
	188, 79, 0, 185, 919, 920, 921, 79, 315, 315,
	315, 315, 1181, 315, 1194, 1195, 1196, 0, 1183, 530,
	315, 0, 1162, 1163, 1178, 1164, 1191, 0, 1166, 986,
	1168, 306, 1197, 79, 79, 79, 416, 0, 1199, 0,
	0, 0, 1057, 0, 0, 0, 0, 484, 1158, 0,
	0, 0, 0, 0, 1206, 1212, 1208, 1213, 0, 0,
	0, 0, 0, 0, 1080, 301, 0, 0, 0, 0,
	0, 0, 0, 1227, 0, 0, 1202, 0, 0, 79,
	79, 1220, 0, 448, 0, 0, 1093, 0, 1238, 1239,
	1240, 0, 79, 0, 0, 1230, 1232, 0, 0, 0,
	0, 0, 0, 1241, 0, 0, 0, 79, 1247, 0,
	1253, 823, 1254, 823, 0, 0, 1264, 1265, 1266, 1267,
	315, 0, 0, 0, 1259, 1094, 597, 79, 1233, 0,
	0, 0, 0, 1093, 1272, 0, 0, 0, 0, 0,
	0, 0, 1273, 1276, 0, 428, 0, 429, 0, 0,
	0, 0, 0, 436, 0, 0, 0, 0, 1260, 0,
	0, 438, 1293, 1292, 0, 79, 0, 1298, 0, 0,
	1297, 0, 1094, 0, 47, 0, 784, 0, 1057, 0,
	0, 79, 1307, 1306, 1305, 0, 0, 1291, 530, 0,
	0, 0, 0, 1315, 1316, 0, 1315, 1316, 0, 1320,
	1061, 1062, 1319, 1321, 0, 0, 0, 0, 0, 0,
	0, 1211, 0, 1078, 1079, 0, 1081, 1082, 0, 0,
	0, 0, 0, 0, 1332, 1333, 0, 0, 315, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 0,
	315, 0, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 315, 315, 315, 315, 315, 315, 315, 0,
	0, 0, 0, 0, 558, 315, 315, 1328, 0, 1017,
	823, 0, 0, 582, 494, 504, 505, 497, 498, 499,
	500, 501, 502, 503, 496, 703, 0, 506, 0, 0,
	0, 0, 0, 0, 198, 484, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 0, 0,
	23, 24, 48, 26, 27, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
	0, 0, 0, 0, 28, 0, 0, 1160, 751, 0,
	0, 0, 186, 0, 0, 212, 0, 0, 765, 765,
	0, 0, 0, 37, 765, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 193, 186,
	186, 765, 0, 0, 195, 186, 0, 0, 0, 0,
	0, 201, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 661, 0, 664, 0, 0, 667,
	315, 0, 670, 0, 0, 624, 0, 0, 199, 0,
	0, 203, 0, 315, 0, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 0, 0, 0, 689, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 43, 44,
	0, 194, 45, 46, 34, 0, 708, 0, 0, 0,
	1222, 1223, 0, 1224, 1225, 1226, 38, 39, 0, 40,
	41, 0, 0, 0, 0, 0, 0, 315, 196, 315,
	204, 205, 206, 207, 211, 0, 1176, 461, 0, 210,
	209, 612, 315, 0, 186, 0, 186, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 625, 0, 495, 494, 504, 505, 497, 498, 499,
	500, 501, 502, 503, 496, 0, 781, 506, 0, 0,
	0, 0, 0, 0, 638, 639, 640, 641, 642, 643,
	644, 49, 645, 646, 647, 648, 649, 626, 627, 628,
	629, 610, 611, 0, 809, 613, 0, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 630, 631, 632,
	633, 634, 635, 636, 637, 0, 495, 494, 504, 505,
	497, 498, 499, 500, 501, 502, 503, 496, 0, 0,
	506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 1330, 0, 0, 0, 0,
	186, 580, 186, 0, 0, 0, 975, 0, 0, 0,
	0, 865, 923, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 490, 315, 493, 895, 0, 0, 896, 0,
	507, 508, 509, 510, 511, 512, 513, 461, 491, 492,
	489, 495, 494, 504, 505, 497, 498, 499, 500, 501,
	502, 503, 496, 0, 0, 506, 0, 0, 0, 0,
	0, 0, 1173, 461, 0, 0, 1013, 315, 0, 315,
	0, 1177, 0, 495, 494, 504, 505, 497, 498, 499,
	500, 501, 502, 503, 496, 0, 0, 506, 0, 0,
	1174, 0, 0, 0, 0, 0, 0, 0, 315, 495,
	494, 504, 505, 497, 498, 499, 500, 501, 502, 503,
	496, 0, 0, 506, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 186, 0, 186, 0, 0, 186, 0,
	0, 186, 0, 0, 0, 674, 0, 0, 0, 0,
	315, 0, 0, 495, 494, 504, 505, 497, 498, 499,
	500, 501, 502, 503, 496, 765, 186, 506, 1097, 975,
	0, 765, 495, 494, 504, 505, 497, 498, 499, 500,
	501, 502, 503, 496, 1060, 186, 506, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 0, 315, 0, 315,
	1120, 0, 0, 924, 495, 494, 504, 505, 497, 498,
	499, 500, 501, 502, 503, 496, 0, 0, 506, 0,
	0, 0, 0, 495, 494, 504, 505, 497, 498, 499,
	500, 501, 502, 503, 496, 236, 1149, 506, 0, 0,
	236, 236, 0, 0, 766, 766, 236, 0, 0, 1151,
	766, 0, 0, 0, 0, 0, 1154, 0, 0, 0,
	236, 236, 236, 236, 315, 186, 0, 766, 186, 186,
	186, 186, 186, 0, 0, 0, 1053, 0, 0, 0,
	798, 0, 0, 186, 0, 0, 0, 580, 0, 0,
	0, 0, 186, 186, 495, 494, 504, 505, 497, 498,
	499, 500, 501, 502, 503, 496, 0, 0, 506, 0,
	0, 0, 0, 0, 0, 0, 1193, 0, 1193, 1193,
	1193, 0, 1198, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 315, 315, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 186, 0, 0,
	0, 1142, 0, 0, 0, 0, 0, 1145, 1146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1234, 1235, 674, 0, 0, 0, 0, 1152, 0, 0,
	0, 0, 0, 1120, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 0,
	0, 0, 0, 765, 0, 0, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 1050, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 0, 766, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 186, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 401, 391, 0, 363, 403, 341, 355, 411,
	356, 357, 384, 327, 371, 128, 353, 0, 344, 322,
	350, 323, 342, 365, 96, 368, 340, 393, 374, 110,
	409, 112, 379, 0, 145, 121, 0, 580, 367, 395,
	369, 389, 362, 385, 332, 378, 404, 354, 382, 405,
	0, 0, 0, 78, 0, 824, 825, 0, 0, 0,
	0, 0, 89, 0, 381, 400, 352, 383, 321, 380,
	0, 325, 328, 410, 398, 347, 348, 987, 0, 0,
	0, 0, 0, 0, 366, 370, 386, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 0, 377, 0,
	0, 0, 329, 326, 0, 364, 0, 0, 0, 331,
	0, 346, 387, 0, 320, 390, 396, 361, 190, 399,
	359, 358, 402, 134, 0, 0, 148, 101, 100, 109,
	394, 343, 351, 92, 349, 140, 130, 159, 376, 131,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 158, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 87, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 324, 766,
	146, 161, 174, 339, 397, 167, 168, 169, 170, 0,
	0, 0, 125, 88, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 335, 338, 333, 334, 372,
	373, 406, 407, 408, 388, 330, 0, 336, 337, 0,
	392, 375, 80, 0, 111, 171, 136, 98, 0, 0,
	0, 0, 0, 0, 401, 391, 162, 363, 403, 341,
	355, 411, 356, 357, 384, 327, 371, 128, 353, 0,
	344, 322, 350, 323, 342, 365, 96, 368, 340, 393,
	374, 110, 409, 112, 379, 0, 145, 121, 0, 0,
	367, 395, 369, 389, 362, 385, 332, 378, 404, 354,
	382, 405, 0, 0, 0, 78, 0, 824, 825, 0,
	0, 0, 0, 0, 89, 0, 381, 400, 352, 383,
	321, 380, 0, 325, 328, 410, 398, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 366, 370, 386, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	377, 0, 0, 0, 329, 326, 0, 364, 0, 0,
	0, 331, 0, 346, 387, 0, 320, 390, 396, 361,
	190, 399, 359, 358, 402, 134, 0, 0, 148, 101,
	100, 109, 394, 343, 351, 92, 349, 140, 130, 159,
	376, 131, 139, 113, 152, 135, 189, 191, 166, 150,
	165, 81, 149, 158, 90, 142, 0, 0, 83, 156,
	147, 119, 105, 106, 82, 0, 138, 95, 99, 94,
	127, 153, 154, 93, 173, 86, 164, 85, 87, 163,
	126, 151, 157, 120, 117, 84, 155, 118, 116, 108,
	97, 102, 132, 115, 133, 103, 123, 122, 124, 0,
	324, 0, 146, 161, 174, 339, 397, 167, 168, 169,
	170, 0, 0, 0, 125, 88, 104, 143, 107, 114,
	137, 172, 129, 141, 91, 160, 144, 335, 338, 333,
	334, 372, 373, 406, 407, 408, 388, 330, 0, 336,
	337, 0, 392, 375, 80, 0, 111, 171, 136, 98,
	0, 0, 0, 0, 0, 0, 401, 391, 162, 363,
	403, 341, 355, 411, 356, 357, 384, 327, 371, 128,
	353, 0, 344, 322, 350, 323, 342, 365, 96, 368,
	340, 393, 374, 110, 409, 112, 379, 0, 145, 121,
	0, 0, 367, 395, 369, 389, 362, 385, 332, 378,
	404, 354, 382, 405, 50, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 381, 400,
	352, 383, 321, 380, 0, 325, 328, 410, 398, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 366, 370,
	386, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 0, 377, 0, 0, 0, 329, 326, 0, 364,
	0, 0, 0, 331, 0, 346, 387, 0, 320, 390,
	396, 361, 190, 399, 359, 358, 402, 134, 0, 0,
	148, 101, 100, 109, 394, 343, 351, 92, 349, 140,
	130, 159, 376, 131, 139, 113, 152, 135, 189, 191,
	166, 150, 165, 81, 149, 158, 90, 142, 0, 0,
	83, 156, 147, 119, 105, 106, 82, 0, 138, 95,
	99, 94, 127, 153, 154, 93, 173, 86, 164, 85,
	87, 163, 126, 151, 157, 120, 117, 84, 155, 118,
	116, 108, 97, 102, 132, 115, 133, 103, 123, 122,
	124, 0, 324, 0, 146, 161, 174, 339, 397, 167,
	168, 169, 170, 0, 0, 0, 125, 88, 104, 143,
	107, 114, 137, 172, 129, 141, 91, 160, 144, 335,
	338, 333, 334, 372, 373, 406, 407, 408, 388, 330,
	0, 336, 337, 0, 392, 375, 80, 0, 111, 171,
	136, 98, 0, 0, 0, 0, 0, 0, 401, 391,
	162, 363, 403, 341, 355, 411, 356, 357, 384, 327,
	371, 128, 353, 0, 344, 322, 350, 323, 342, 365,
	96, 368, 340, 393, 374, 110, 409, 112, 379, 0,
	145, 121, 0, 0, 367, 395, 369, 389, 362, 385,
	332, 378, 404, 354, 382, 405, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	381, 400, 352, 383, 321, 380, 0, 325, 328, 410,
	398, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	366, 370, 386, 360, 0, 0, 0, 0, 0, 0,
	1056, 0, 345, 0, 377, 0, 0, 0, 329, 326,
	0, 364, 0, 0, 0, 331, 0, 346, 387, 0,
	320, 390, 396, 361, 190, 399, 359, 358, 402, 134,
	0, 0, 148, 101, 100, 109, 394, 343, 351, 92,
	349, 140, 130, 159, 376, 131, 139, 113, 152, 135,
	189, 191, 166, 150, 165, 81, 149, 158, 90, 142,
	0, 0, 83, 156, 147, 119, 105, 106, 82, 0,
	138, 95, 99, 94, 127, 153, 154, 93, 173, 86,
	164, 85, 87, 163, 126, 151, 157, 120, 117, 84,
	155, 118, 116, 108, 97, 102, 132, 115, 133, 103,
	123, 122, 124, 0, 324, 0, 146, 161, 174, 339,
	397, 167, 168, 169, 170, 0, 0, 0, 125, 88,
	104, 143, 107, 114, 137, 172, 129, 141, 91, 160,
	144, 335, 338, 333, 334, 372, 373, 406, 407, 408,
	388, 330, 0, 336, 337, 0, 392, 375, 80, 0,
	111, 171, 136, 98, 0, 0, 0, 0, 0, 0,
	401, 391, 162, 363, 403, 341, 355, 411, 356, 357,
	384, 327, 371, 128, 353, 0, 344, 322, 350, 323,
	342, 365, 96, 368, 340, 393, 374, 110, 409, 112,
	379, 0, 145, 121, 0, 0, 367, 395, 369, 389,
	362, 385, 332, 378, 404, 354, 382, 405, 0, 0,
	0, 241, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 381, 400, 352, 383, 321, 380, 0, 325,
	328, 410, 398, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 366, 370, 386, 360, 0, 0, 0, 0,
	0, 0, 717, 0, 345, 0, 377, 0, 0, 0,
	329, 326, 0, 364, 0, 0, 0, 331, 0, 346,
	387, 0, 320, 390, 396, 361, 190, 399, 359, 358,
	402, 134, 0, 0, 148, 101, 100, 109, 394, 343,
	351, 92, 349, 140, 130, 159, 376, 131, 139, 113,
	152, 135, 189, 191, 166, 150, 165, 81, 149, 158,
	90, 142, 0, 0, 83, 156, 147, 119, 105, 106,
	82, 0, 138, 95, 99, 94, 127, 153, 154, 93,
	173, 86, 164, 85, 87, 163, 126, 151, 157, 120,
	117, 84, 155, 118, 116, 108, 97, 102, 132, 115,
	133, 103, 123, 122, 124, 0, 324, 0, 146, 161,
	174, 339, 397, 167, 168, 169, 170, 0, 0, 0,
	125, 88, 104, 143, 107, 114, 137, 172, 129, 141,
	91, 160, 144, 335, 338, 333, 334, 372, 373, 406,
	407, 408, 388, 330, 0, 336, 337, 0, 392, 375,
	80, 0, 111, 171, 136, 98, 0, 0, 0, 0,
	0, 0, 401, 391, 162, 363, 403, 341, 355, 411,
	356, 357, 384, 327, 371, 128, 353, 0, 344, 322,
	350, 323, 342, 365, 96, 368, 340, 393, 374, 110,
	409, 112, 379, 0, 145, 121, 0, 0, 367, 395,
	369, 389, 362, 385, 332, 378, 404, 354, 382, 405,
	0, 0, 0, 1314, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 381, 400, 352, 383, 321, 380,
	0, 325, 328, 410, 398, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 366, 370, 386, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 0, 377, 0,
	0, 0, 329, 326, 0, 364, 0, 0, 0, 331,
	0, 346, 387, 0, 320, 390, 396, 361, 190, 399,
	359, 358, 402, 134, 0, 0, 148, 101, 100, 109,
	394, 343, 351, 92, 349, 140, 130, 159, 376, 131,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 158, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 87, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 324, 0,
	146, 161, 174, 339, 397, 167, 168, 169, 170, 0,
	0, 0, 125, 88, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 335, 338, 333, 334, 372,
	373, 406, 407, 408, 388, 330, 0, 336, 337, 0,
	392, 375, 80, 0, 111, 171, 136, 98, 0, 0,
	0, 0, 0, 0, 401, 391, 162, 363, 403, 341,
	355, 411, 356, 357, 384, 327, 371, 128, 353, 0,
	344, 322, 350, 323, 342, 365, 96, 368, 340, 393,
	374, 110, 409, 112, 379, 0, 145, 121, 0, 0,
	367, 395, 369, 389, 362, 385, 332, 378, 404, 354,
	382, 405, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 381, 400, 352, 383,
	321, 380, 0, 325, 328, 410, 398, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 366, 370, 386, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	377, 0, 0, 0, 329, 326, 0, 364, 0, 0,
	0, 331, 0, 346, 387, 0, 320, 390, 396, 361,
	190, 399, 359, 358, 402, 134, 0, 0, 148, 101,
	100, 109, 394, 343, 351, 92, 349, 140, 130, 159,
	376, 131, 139, 113, 152, 135, 189, 191, 166, 150,
	165, 81, 149, 158, 90, 142, 0, 0, 83, 156,
	147, 119, 105, 106, 82, 0, 138, 95, 99, 94,
	127, 153, 154, 93, 173, 86, 164, 85, 87, 163,
	126, 151, 157, 120, 117, 84, 155, 118, 116, 108,
	97, 102, 132, 115, 133, 103, 123, 122, 124, 0,
	324, 0, 146, 161, 174, 339, 397, 167, 168, 169,
	170, 0, 0, 0, 125, 88, 104, 143, 107, 114,
	137, 172, 129, 141, 91, 160, 144, 335, 338, 333,
	334, 372, 373, 406, 407, 408, 388, 330, 0, 336,
	337, 0, 392, 375, 80, 0, 111, 171, 136, 98,
	0, 0, 0, 0, 0, 0, 401, 391, 162, 363,
	403, 341, 355, 411, 356, 357, 384, 327, 371, 128,
	353, 0, 344, 322, 350, 323, 342, 365, 96, 368,
	340, 393, 374, 110, 409, 112, 379, 0, 145, 121,
	0, 0, 367, 395, 369, 389, 362, 385, 332, 378,
	404, 354, 382, 405, 0, 0, 0, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 381, 400,
	352, 383, 321, 380, 0, 325, 328, 410, 398, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 366, 370,
	386, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 0, 377, 0, 0, 0, 329, 326, 0, 364,
	0, 0, 0, 331, 0, 346, 387, 0, 320, 390,
	396, 361, 190, 399, 359, 358, 402, 134, 0, 0,
	148, 101, 100, 109, 394, 343, 351, 92, 349, 140,
	130, 159, 376, 131, 139, 113, 152, 135, 189, 191,
	166, 150, 165, 81, 149, 158, 90, 142, 0, 0,
	83, 156, 147, 119, 105, 106, 82, 0, 138, 95,
	99, 94, 127, 153, 154, 93, 173, 86, 164, 85,
	87, 163, 126, 151, 157, 120, 117, 84, 155, 118,
	116, 108, 97, 102, 132, 115, 133, 103, 123, 122,
	124, 0, 324, 0, 146, 161, 174, 339, 397, 167,
	168, 169, 170, 0, 0, 0, 125, 88, 104, 143,
	107, 114, 137, 172, 129, 141, 91, 160, 144, 335,
	338, 333, 334, 372, 373, 406, 407, 408, 388, 330,
	0, 336, 337, 0, 392, 375, 80, 0, 111, 171,
	136, 98, 0, 0, 0, 0, 0, 0, 401, 391,
	162, 363, 403, 341, 355, 411, 356, 357, 384, 327,
	371, 128, 353, 0, 344, 322, 350, 323, 342, 365,
	96, 368, 340, 393, 374, 110, 409, 112, 379, 0,
	145, 121, 0, 0, 367, 395, 369, 389, 362, 385,
	332, 378, 404, 354, 382, 405, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	381, 400, 352, 383, 321, 380, 0, 325, 328, 410,
	398, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	366, 370, 386, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 345, 0, 377, 0, 0, 0, 329, 326,
	0, 364, 0, 0, 0, 331, 0, 346, 387, 0,
	320, 390, 396, 361, 190, 399, 359, 358, 402, 134,
	0, 0, 148, 101, 100, 109, 394, 343, 351, 92,
	349, 140, 130, 159, 376, 131, 139, 113, 152, 135,
	189, 191, 166, 150, 165, 81, 149, 158, 90, 142,
	0, 0, 83, 156, 147, 119, 105, 106, 82, 0,
	138, 95, 99, 94, 127, 153, 154, 93, 173, 86,
	164, 85, 318, 163, 126, 151, 157, 120, 117, 84,
	155, 118, 116, 108, 97, 102, 132, 115, 133, 103,
	123, 122, 124, 0, 324, 0, 146, 161, 174, 339,
	397, 167, 168, 169, 170, 0, 0, 0, 319, 317,
	104, 143, 107, 114, 137, 172, 129, 141, 91, 160,
	144, 335, 338, 333, 334, 372, 373, 406, 407, 408,
	388, 330, 0, 336, 337, 0, 392, 375, 80, 0,
	111, 171, 136, 98, 0, 0, 0, 0, 0, 0,
	401, 391, 162, 363, 403, 341, 355, 411, 356, 357,
	384, 327, 371, 128, 353, 0, 344, 322, 350, 323,
	342, 365, 96, 368, 340, 393, 374, 110, 409, 112,
	379, 0, 145, 121, 0, 0, 367, 395, 369, 389,
	362, 385, 332, 378, 404, 354, 382, 405, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 381, 400, 352, 383, 321, 380, 0, 325,
	328, 410, 398, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 366, 370, 386, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 0, 377, 0, 0, 0,
	329, 326, 0, 364, 0, 0, 0, 331, 0, 346,
	387, 0, 320, 390, 396, 361, 190, 399, 359, 358,
	402, 134, 0, 0, 148, 101, 100, 109, 394, 343,
	351, 92, 349, 140, 130, 159, 376, 131, 139, 113,
	152, 135, 189, 191, 166, 150, 165, 81, 149, 158,
	90, 142, 0, 0, 83, 156, 147, 119, 105, 106,
	82, 0, 138, 95, 99, 94, 127, 153, 154, 93,
	173, 86, 164, 85, 87, 163, 126, 151, 157, 120,
	117, 84, 155, 118, 116, 108, 97, 102, 132, 115,
	133, 103, 123, 122, 124, 0, 324, 0, 146, 161,
	174, 339, 397, 167, 168, 169, 170, 0, 0, 0,
	125, 88, 104, 143, 107, 114, 137, 172, 129, 141,
	91, 160, 144, 335, 338, 333, 334, 372, 373, 406,
	407, 408, 388, 330, 0, 336, 337, 0, 392, 375,
	80, 0, 111, 171, 136, 98, 0, 0, 0, 0,
	0, 0, 401, 391, 162, 363, 403, 341, 355, 411,
	356, 357, 384, 327, 371, 128, 353, 0, 344, 322,
	350, 323, 342, 365, 96, 368, 340, 393, 374, 110,
	409, 112, 379, 0, 145, 121, 0, 0, 367, 395,
	369, 389, 362, 385, 332, 378, 404, 354, 382, 405,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 381, 400, 352, 383, 321, 380,
	0, 325, 328, 410, 398, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 366, 370, 386, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 0, 377, 0,
	0, 0, 329, 326, 0, 364, 0, 0, 0, 331,
	0, 346, 387, 0, 320, 390, 396, 361, 190, 399,
	359, 358, 402, 134, 0, 0, 148, 101, 100, 109,
	394, 343, 351, 92, 349, 140, 130, 159, 376, 131,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 590, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 318, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 324, 0,
	146, 161, 174, 339, 397, 167, 168, 169, 170, 0,
	0, 0, 319, 317, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 335, 338, 333, 334, 372,
	373, 406, 407, 408, 388, 330, 0, 336, 337, 0,
	392, 375, 80, 0, 111, 171, 136, 98, 0, 0,
	0, 0, 0, 0, 401, 391, 162, 363, 403, 341,
	355, 411, 356, 357, 384, 327, 371, 128, 353, 0,
	344, 322, 350, 323, 342, 365, 96, 368, 340, 393,
	374, 110, 409, 112, 379, 0, 145, 121, 0, 0,
	367, 395, 369, 389, 362, 385, 332, 378, 404, 354,
	382, 405, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 381, 400, 352, 383,
	321, 380, 0, 325, 328, 410, 398, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 366, 370, 386, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	377, 0, 0, 0, 329, 326, 0, 364, 0, 0,
	0, 331, 0, 346, 387, 0, 320, 390, 396, 361,
	190, 399, 359, 358, 402, 134, 0, 0, 148, 101,
	100, 109, 394, 343, 351, 92, 349, 140, 130, 159,
	376, 131, 139, 113, 152, 135, 189, 191, 166, 150,
	165, 81, 149, 309, 90, 142, 0, 0, 83, 156,
	147, 119, 105, 106, 82, 0, 138, 95, 99, 94,
	127, 153, 154, 93, 173, 86, 164, 85, 318, 163,
	126, 151, 157, 120, 117, 84, 155, 118, 116, 108,
	97, 102, 132, 115, 133, 103, 123, 122, 124, 0,
	324, 0, 146, 161, 174, 339, 397, 167, 168, 169,
	170, 0, 0, 0, 319, 317, 312, 311, 107, 114,
	137, 172, 129, 141, 91, 160, 144, 335, 338, 333,
	334, 372, 373, 406, 407, 408, 388, 330, 0, 336,
	337, 0, 392, 375, 80, 0, 111, 171, 136, 98,
	128, 0, 0, 753, 0, 243, 0, 0, 162, 96,
	0, 240, 0, 0, 110, 282, 112, 0, 0, 145,
	121, 0, 0, 0, 0, 273, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 241, 261,
	260, 263, 264, 265, 266, 0, 0, 89, 262, 267,
	268, 269, 0, 0, 238, 254, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 234,
	0, 0, 0, 293, 0, 253, 0, 0, 249, 250,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 291, 0, 134, 0,
	0, 148, 101, 100, 109, 0, 0, 0, 92, 0,
	140, 130, 159, 0, 131, 139, 113, 152, 135, 189,
	191, 166, 150, 165, 81, 149, 158, 90, 142, 0,
	0, 83, 156, 147, 119, 105, 106, 82, 0, 138,
	95, 99, 94, 127, 153, 154, 93, 173, 86, 164,
	85, 87, 163, 126, 151, 157, 120, 117, 84, 155,
	118, 116, 108, 97, 102, 132, 115, 133, 103, 123,
	122, 124, 0, 0, 0, 146, 161, 174, 0, 0,
	167, 168, 169, 170, 0, 0, 0, 125, 88, 104,
	143, 107, 114, 137, 172, 129, 141, 91, 160, 144,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	275, 276, 277, 278, 280, 0, 279, 80, 128, 111,
	171, 136, 98, 243, 0, 0, 0, 96, 0, 240,
	0, 162, 110, 282, 112, 0, 0, 145, 121, 0,
	0, 0, 0, 273, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 461, 241, 261, 260, 263,
	264, 265, 266, 0, 0, 89, 262, 267, 268, 269,
	0, 0, 238, 254, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 0, 0, 0,
	0, 293, 0, 253, 0, 0, 249, 250, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 291, 0, 134, 0, 0, 148,
	101, 100, 109, 0, 0, 0, 92, 0, 140, 130,
	159, 0, 131, 139, 113, 152, 135, 189, 191, 166,
	150, 165, 81, 149, 158, 90, 142, 0, 0, 83,
	156, 147, 119, 105, 106, 82, 0, 138, 95, 99,
	94, 127, 153, 154, 93, 173, 86, 164, 85, 87,
	163, 126, 151, 157, 120, 117, 84, 155, 118, 116,
	108, 97, 102, 132, 115, 133, 103, 123, 122, 124,
	0, 0, 0, 146, 161, 174, 0, 0, 167, 168,
	169, 170, 0, 0, 0, 125, 88, 104, 143, 107,
	114, 137, 172, 129, 141, 91, 160, 144, 283, 292,
	289, 290, 287, 288, 286, 285, 284, 294, 275, 276,
	277, 278, 280, 0, 279, 80, 128, 111, 171, 136,
	98, 243, 0, 0, 0, 96, 0, 240, 0, 162,
	110, 282, 112, 0, 0, 145, 121, 0, 0, 0,
	0, 273, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 241, 261, 260, 263, 264, 265,
	266, 0, 0, 89, 262, 267, 268, 269, 0, 0,
	238, 254, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 234, 0, 0, 0, 293,
	0, 253, 0, 0, 249, 250, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 291, 0, 134, 0, 0, 148, 101, 100,
	109, 0, 0, 0, 92, 0, 140, 130, 159, 0,
	131, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 158, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 87, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 0,
	0, 146, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 125, 88, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 283, 292, 289, 290,
	287, 288, 286, 285, 284, 294, 275, 276, 277, 278,
	280, 0, 279, 80, 128, 111, 171, 136, 98, 243,
	0, 0, 0, 96, 0, 240, 0, 162, 110, 282,
	112, 0, 0, 145, 121, 0, 0, 0, 0, 273,
	274, 0, 0, 0, 0, 0, 0, 816, 0, 50,
	0, 0, 241, 261, 260, 263, 264, 265, 266, 0,
	0, 89, 262, 267, 268, 269, 0, 0, 238, 254,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 0, 0, 0, 0, 293, 0, 253,
	0, 0, 249, 250, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	291, 0, 134, 0, 0, 148, 101, 100, 109, 0,
	0, 0, 92, 0, 140, 130, 159, 0, 131, 139,
	113, 152, 135, 189, 191, 166, 150, 165, 81, 149,
	158, 90, 142, 0, 0, 83, 156, 147, 119, 105,
	106, 82, 0, 138, 95, 99, 94, 127, 153, 154,
	93, 173, 86, 164, 85, 87, 163, 126, 151, 157,
	120, 117, 84, 155, 118, 116, 108, 97, 102, 132,
	115, 133, 103, 123, 122, 124, 0, 0, 0, 146,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 125, 88, 104, 143, 107, 114, 137, 172, 129,
	141, 91, 160, 144, 283, 292, 289, 290, 287, 288,
	286, 285, 284, 294, 275, 276, 277, 278, 280, 23,
	279, 80, 0, 111, 171, 136, 98, 0, 0, 0,
	0, 128, 0, 0, 0, 162, 243, 0, 0, 0,
	96, 0, 240, 0, 0, 110, 282, 112, 0, 0,
	145, 121, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 241,
	261, 260, 263, 264, 265, 266, 0, 0, 89, 262,
	267, 268, 269, 0, 0, 238, 254, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	0, 0, 0, 0, 293, 0, 253, 0, 0, 249,
	250, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 291, 0, 134,
	0, 0, 148, 101, 100, 109, 0, 0, 0, 92,
	0, 140, 130, 159, 0, 131, 139, 113, 152, 135,
	189, 191, 166, 150, 165, 81, 149, 158, 90, 142,
	0, 0, 83, 156, 147, 119, 105, 106, 82, 0,
	138, 95, 99, 94, 127, 153, 154, 93, 173, 86,
	164, 85, 87, 163, 126, 151, 157, 120, 117, 84,
	155, 118, 116, 108, 97, 102, 132, 115, 133, 103,
	123, 122, 124, 0, 0, 0, 146, 161, 174, 0,
	0, 167, 168, 169, 170, 0, 0, 0, 125, 88,
	104, 143, 107, 114, 137, 172, 129, 141, 91, 160,
	144, 283, 292, 289, 290, 287, 288, 286, 285, 284,
	294, 275, 276, 277, 278, 280, 0, 279, 80, 128,
	111, 171, 136, 98, 243, 0, 0, 0, 96, 0,
	240, 0, 162, 110, 282, 112, 0, 0, 145, 121,
	0, 0, 0, 0, 273, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 241, 261, 260,
	263, 264, 265, 266, 0, 0, 89, 262, 267, 268,
	269, 0, 0, 238, 254, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 0, 0,
	0, 0, 293, 0, 253, 0, 0, 249, 250, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 291, 0, 134, 0, 0,
	148, 101, 100, 109, 0, 0, 0, 92, 0, 140,
	130, 159, 0, 131, 139, 113, 152, 135, 189, 191,
	166, 150, 165, 81, 149, 158, 90, 142, 0, 0,
	83, 156, 147, 119, 105, 106, 82, 0, 138, 95,
	99, 94, 127, 153, 154, 93, 173, 86, 164, 85,
	87, 163, 126, 151, 157, 120, 117, 84, 155, 118,
	116, 108, 97, 102, 132, 115, 133, 103, 123, 122,
	124, 0, 0, 0, 146, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 125, 88, 104, 143,
	107, 114, 137, 172, 129, 141, 91, 160, 144, 283,
	292, 289, 290, 287, 288, 286, 285, 284, 294, 275,
	276, 277, 278, 280, 0, 279, 80, 128, 111, 171,
	136, 98, 0, 0, 0, 0, 96, 0, 0, 0,
	162, 110, 282, 112, 0, 0, 145, 121, 0, 0,
	0, 0, 273, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 241, 261, 260, 263, 264,
	265, 266, 0, 0, 89, 262, 267, 268, 269, 0,
	0, 0, 254, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 0, 0, 0, 0,
	293, 0, 253, 0, 0, 249, 250, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 291, 0, 134, 0, 0, 148, 101,
	100, 109, 0, 0, 0, 92, 0, 140, 130, 159,
	1331, 131, 139, 113, 152, 135, 189, 191, 166, 150,
	165, 81, 149, 158, 90, 142, 0, 0, 83, 156,
	147, 119, 105, 106, 82, 0, 138, 95, 99, 94,
	127, 153, 154, 93, 173, 86, 164, 85, 87, 163,
	126, 151, 157, 120, 117, 84, 155, 118, 116, 108,
	97, 102, 132, 115, 133, 103, 123, 122, 124, 0,
	0, 0, 146, 161, 174, 0, 0, 167, 168, 169,
	170, 0, 0, 0, 125, 88, 104, 143, 107, 114,
	137, 172, 129, 141, 91, 160, 144, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 275, 276, 277,
	278, 280, 0, 279, 80, 128, 111, 171, 136, 98,
	0, 0, 0, 0, 96, 0, 0, 0, 162, 110,
	282, 112, 0, 0, 145, 121, 0, 0, 0, 0,
	273, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 241, 261, 260, 263, 264, 265, 266,
	0, 0, 89, 262, 267, 268, 269, 0, 0, 0,
	254, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 0, 0, 0, 0, 293, 0,
	253, 0, 0, 249, 250, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 291, 0, 134, 0, 0, 148, 101, 100, 109,
	0, 0, 0, 92, 0, 140, 130, 159, 0, 131,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 158, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 87, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 0, 0,
	146, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 125, 88, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 283, 292, 289, 290, 287,
	288, 286, 285, 284, 294, 275, 276, 277, 278, 280,
	0, 279, 80, 128, 111, 171, 136, 98, 0, 0,
	0, 0, 96, 0, 0, 0, 162, 110, 0, 112,
	0, 0, 145, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 495, 494, 504, 505,
	497, 498, 499, 500, 501, 502, 503, 496, 0, 0,
	506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 101, 100, 109, 0, 0,
	0, 92, 0, 140, 130, 159, 0, 131, 139, 113,
	152, 135, 189, 191, 166, 150, 165, 81, 149, 158,
	90, 142, 0, 0, 83, 156, 147, 119, 105, 106,
	82, 0, 138, 95, 99, 94, 127, 153, 154, 93,
	173, 86, 164, 85, 87, 163, 126, 151, 157, 120,
	117, 84, 155, 118, 116, 108, 97, 102, 132, 115,
	133, 103, 123, 122, 124, 0, 0, 0, 146, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	125, 88, 104, 143, 107, 114, 137, 172, 129, 141,
	91, 160, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	80, 96, 111, 171, 136, 98, 110, 0, 112, 0,
	0, 145, 121, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 73, 0, 67, 0, 0, 0, 74,
	134, 0, 0, 148, 101, 100, 109, 0, 0, 0,
	92, 0, 140, 130, 159, 0, 131, 139, 113, 152,
	135, 76, 69, 166, 150, 165, 81, 149, 158, 90,
	142, 0, 0, 83, 156, 147, 119, 105, 106, 82,
	0, 138, 95, 99, 94, 127, 153, 154, 93, 173,
	86, 164, 85, 87, 163, 126, 151, 157, 120, 117,
	84, 155, 118, 116, 108, 97, 102, 132, 115, 133,
	103, 123, 122, 124, 0, 0, 0, 146, 161, 174,
	0, 0, 167, 168, 169, 170, 0, 0, 0, 125,
	88, 104, 143, 107, 114, 137, 172, 129, 141, 91,
	160, 144, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 111, 171, 136, 98, 77, 128, 0, 0, 0,
	483, 0, 0, 162, 0, 96, 0, 0, 0, 0,
	110, 0, 112, 0, 0, 145, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 485, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 480, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 101, 100,
	109, 0, 0, 0, 92, 0, 140, 130, 159, 0,
	131, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 158, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 87, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 0,
	0, 146, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 125, 88, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 579,
	0, 0, 0, 80, 96, 111, 171, 136, 98, 110,
	0, 112, 0, 0, 145, 121, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 581, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 134, 0, 0, 148, 101, 100, 109,
	0, 0, 0, 92, 0, 140, 130, 159, 0, 131,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 158, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 87, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 0, 0,
	146, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 125, 88, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 0, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 80, 0, 111, 171, 136, 98, 96, 0,
	0, 0, 0, 110, 0, 112, 162, 0, 145, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 134, 0, 0,
	148, 101, 100, 109, 0, 0, 0, 92, 0, 140,
	130, 159, 0, 131, 139, 113, 152, 135, 189, 191,
	166, 150, 165, 81, 149, 158, 90, 142, 0, 0,
	83, 156, 147, 119, 105, 106, 82, 0, 138, 95,
	99, 94, 127, 153, 154, 93, 173, 86, 164, 85,
	87, 163, 126, 151, 157, 120, 117, 84, 155, 118,
	116, 108, 97, 102, 132, 115, 133, 103, 123, 122,
	124, 0, 0, 0, 146, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 125, 88, 104, 143,
	107, 114, 137, 172, 129, 141, 91, 160, 144, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 80, 0, 111, 171,
	136, 98, 96, 0, 0, 0, 0, 110, 0, 112,
	162, 0, 145, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 101, 100, 109, 0, 0,
	0, 92, 0, 140, 130, 159, 0, 131, 139, 113,
	152, 135, 189, 191, 166, 150, 165, 81, 149, 158,
	90, 142, 0, 0, 83, 156, 147, 119, 105, 106,
	82, 0, 138, 95, 99, 94, 127, 153, 154, 93,
	173, 86, 164, 85, 87, 163, 126, 151, 157, 120,
	117, 84, 155, 118, 116, 108, 97, 102, 132, 115,
	133, 103, 123, 122, 124, 0, 0, 0, 146, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	125, 88, 104, 143, 107, 114, 137, 172, 129, 141,
	91, 160, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	80, 96, 111, 171, 136, 98, 110, 0, 112, 0,
	0, 145, 121, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 704, 0, 0, 705, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	134, 0, 0, 148, 101, 100, 109, 0, 0, 0,
	92, 0, 140, 130, 159, 0, 131, 139, 113, 152,
	135, 189, 191, 166, 150, 165, 81, 149, 158, 90,
	142, 0, 0, 83, 156, 147, 119, 105, 106, 82,
	0, 138, 95, 99, 94, 127, 153, 154, 93, 173,
	86, 164, 85, 87, 163, 126, 151, 157, 120, 117,
	84, 155, 118, 116, 108, 97, 102, 132, 115, 133,
	103, 123, 122, 124, 0, 0, 0, 146, 161, 174,
	0, 0, 167, 168, 169, 170, 0, 0, 0, 125,
	88, 104, 143, 107, 114, 137, 172, 129, 141, 91,
	160, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 80,
	0, 111, 171, 136, 98, 96, 0, 599, 0, 0,
	110, 0, 112, 162, 0, 145, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 598, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 101, 100,
	109, 0, 0, 0, 92, 0, 140, 130, 159, 0,
	131, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 158, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 87, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 0,
	0, 146, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 125, 88, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 579,
	0, 0, 0, 80, 96, 111, 171, 136, 98, 110,
	0, 112, 0, 0, 145, 121, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 581, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 134, 0, 0, 148, 101, 100, 109,
	0, 0, 0, 92, 0, 140, 130, 159, 0, 577,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 158, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 87, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 0, 0,
	146, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 125, 88, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 80, 96, 111, 171, 136, 98, 110, 0,
	112, 0, 0, 145, 121, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 101, 100, 109, 0,
	0, 0, 92, 0, 140, 130, 159, 0, 131, 139,
	113, 152, 135, 189, 191, 166, 150, 165, 81, 149,
	158, 90, 142, 0, 0, 83, 156, 147, 119, 105,
	106, 82, 0, 138, 95, 99, 94, 127, 153, 154,
	93, 173, 86, 164, 85, 87, 163, 126, 151, 157,
	120, 117, 84, 155, 118, 116, 108, 97, 102, 132,
	115, 133, 103, 123, 122, 124, 0, 0, 0, 146,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 125, 88, 104, 143, 107, 114, 137, 172, 129,
	141, 91, 160, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 80, 96, 111, 171, 136, 98, 110, 0, 112,
	0, 0, 145, 121, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 581, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 101, 100, 109, 0, 0,
	0, 92, 0, 140, 130, 159, 0, 131, 139, 113,
	152, 135, 189, 191, 166, 150, 165, 81, 149, 158,
	90, 142, 0, 0, 83, 156, 147, 119, 105, 106,
	82, 0, 138, 95, 99, 94, 127, 153, 154, 93,
	173, 86, 164, 85, 87, 163, 126, 151, 157, 120,
	117, 84, 155, 118, 116, 108, 97, 102, 132, 115,
	133, 103, 123, 122, 124, 0, 0, 0, 146, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	125, 88, 104, 143, 107, 114, 137, 172, 129, 141,
	91, 160, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	80, 96, 111, 171, 136, 98, 110, 0, 112, 0,
	0, 145, 121, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 485, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	134, 0, 0, 148, 101, 100, 109, 0, 0, 0,
	92, 0, 140, 130, 159, 0, 131, 139, 113, 152,
	135, 189, 191, 166, 150, 165, 81, 149, 158, 90,
	142, 0, 0, 83, 156, 147, 119, 105, 106, 82,
	0, 138, 95, 99, 94, 127, 153, 154, 93, 173,
	86, 164, 85, 87, 163, 126, 151, 157, 120, 117,
	84, 155, 118, 116, 108, 97, 102, 132, 115, 133,
	103, 123, 122, 124, 0, 0, 0, 146, 161, 174,
	0, 0, 167, 168, 169, 170, 0, 0, 0, 125,
	88, 104, 143, 107, 114, 137, 172, 129, 141, 91,
	160, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 80,
	0, 111, 171, 136, 98, 0, 557, 96, 0, 0,
	0, 0, 110, 162, 112, 0, 0, 145, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	101, 100, 109, 0, 0, 0, 92, 0, 140, 130,
	159, 0, 131, 139, 113, 152, 135, 189, 191, 166,
	150, 165, 81, 149, 158, 90, 142, 0, 0, 83,
	156, 147, 119, 105, 106, 82, 0, 138, 95, 99,
	94, 127, 153, 154, 93, 173, 86, 164, 85, 87,
	163, 126, 151, 157, 120, 117, 84, 155, 118, 116,
	108, 97, 102, 132, 115, 133, 103, 123, 122, 124,
	0, 0, 0, 146, 161, 174, 0, 0, 167, 168,
	169, 170, 0, 0, 0, 125, 88, 104, 143, 107,
	114, 137, 172, 129, 141, 91, 160, 144, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 80, 96, 111, 171, 136,
	98, 110, 0, 112, 0, 0, 145, 121, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 134, 0, 0, 148, 101,
	100, 109, 0, 0, 0, 92, 0, 140, 130, 159,
	0, 131, 139, 113, 152, 135, 189, 191, 166, 150,
	165, 81, 149, 158, 90, 142, 0, 0, 83, 156,
	147, 119, 105, 106, 82, 0, 138, 95, 99, 94,
	127, 153, 154, 93, 173, 86, 164, 85, 87, 163,
	126, 151, 157, 120, 117, 84, 155, 118, 116, 108,
	97, 102, 132, 115, 133, 103, 123, 122, 124, 0,
	0, 0, 146, 161, 174, 0, 0, 167, 168, 169,
	170, 0, 0, 0, 125, 88, 104, 143, 107, 114,
	137, 172, 129, 141, 91, 160, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 80, 96, 111, 171, 136, 98,
	110, 0, 112, 0, 0, 145, 121, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 101, 100,
	109, 0, 0, 0, 92, 0, 140, 130, 159, 0,
	131, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 158, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 87, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 0,
	0, 146, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 125, 88, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 80, 96, 111, 171, 136, 98, 110,
	0, 112, 0, 0, 145, 121, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 134, 0, 0, 148, 101, 100, 109,
	0, 0, 0, 92, 0, 140, 130, 159, 0, 131,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 158, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 87, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 0, 0,
	146, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 125, 88, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 80, 96, 111, 171, 136, 98, 110, 0,
	112, 0, 0, 145, 121, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 101, 100, 109, 0,
	0, 0, 92, 0, 140, 130, 159, 0, 131, 139,
	113, 152, 135, 189, 191, 166, 150, 165, 81, 149,
	158, 90, 142, 0, 0, 83, 156, 147, 119, 105,
	106, 82, 0, 138, 95, 99, 94, 127, 153, 154,
	93, 173, 86, 164, 85, 87, 163, 126, 151, 157,
	120, 117, 84, 155, 118, 116, 108, 97, 102, 132,
	115, 133, 103, 123, 122, 124, 0, 0, 0, 146,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 125, 88, 104, 143, 107, 114, 137, 172, 129,
	141, 91, 160, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 80, 96, 111, 171, 136, 98, 110, 0, 112,
	0, 0, 145, 121, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 101, 100, 109, 0, 0,
	0, 92, 0, 140, 130, 159, 0, 131, 139, 113,
	152, 135, 189, 191, 166, 150, 165, 81, 149, 158,
	90, 142, 0, 0, 83, 156, 147, 119, 105, 106,
	82, 0, 138, 95, 99, 94, 127, 153, 154, 93,
	173, 86, 164, 85, 87, 163, 126, 151, 157, 120,
	117, 84, 155, 118, 116, 108, 97, 102, 132, 115,
	133, 103, 123, 122, 124, 0, 0, 0, 146, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	125, 88, 104, 143, 107, 114, 137, 172, 129, 141,
	91, 160, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 111, 171, 136, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 162,
}
var yyPact = [...]int{

	1414, -1000, -185, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 841, 894, -1000, -1000, -1000, -1000, -1000, -1000, 700,
	7544, 71, 96, -10, 10428, 95, 1372, 11085, -1000, 9,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 701, -1000, -1000,
	-1000, -1000, -1000, 837, 845, 704, 827, 770, -1000, 5948,
	64, 9326, 10209, 5259, -1000, 525, 92, 11085, -130, 10647,
	60, 60, 523, 60, -1000, -1000, -1000, 199, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 94, 11085, -1000, 11085, 52,
	521, 52, 52, 52, 11085, -1000, 124, -1000, -1000, -1000,
	-1000, -1000, 11085, 493, 793, 61, 2991, 2991, 2991, 2991,
	16, 2991, -74, 716, -1000, -1000, -1000, -1000, 2991, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 471,
	796, 6641, 6641, 841, -1000, 701, -1000, -1000, -1000, 790,
	-1000, -1000, 244, 862, -1000, 7778, 121, -1000, 6641, 1670,
	646, -1000, -1000, 646, -1000, -1000, 106, -1000, -1000, 7097,
	7097, 7097, 7097, 7097, 7097, 7097, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	646, -1000, 6413, 646, 646, 646, 646, 646, 646, 646,
	646, 6641, 646, 646, 646, 646, 646, 646, 646, 646,
	646, 646, 646, 646, 646, 9990, 675, 891, -1000, -1000,
	-1000, 823, 8445, 9107, 11085, 556, -1000, 643, 5007, -103,
	-1000, -1000, -1000, 192, 8888, -1000, -1000, -1000, 791, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 533, -1000, 1485, 460, 2991, 83, 680, 452,
	226, 450, 2991, -165, -1000, 11085, 444, 11085, 2991, 74,
	11085, 820, 715, 11085, 433, 430, -1000, 4755, -1000, 2991,
	2991, 2991, 2991, 2991, 2991, 2991, 2991, -1000, -1000, -1000,
	-1000, -1000, -1000, 2991, 2991, -1000, -65, -1000, 11085, -1000,
	-1000, -1000, -1000, 868, 151, 412, 119, 644, -1000, 348,
	837, 471, 770, 8664, 733, -1000, -1000, 11085, -1000, 6641,
	6641, 245, -1000, 9764, -1000, -1000, 3495, 158, 7097, 308,
	172, 7097, 7097, 7097, 7097, 7097, 7097, 7097, 7097, 7097,
	7097, 7097, 7097, 7097, 7097, 7097, 294, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 425, -1000, 701, 657, 657,
	134, 134, 134, 134, 134, 134, 7325, 5492, 471, 529,
	196, 6413, 5948, 5948, 6641, 6641, 10866, 10866, 5948, 829,
	221, 196, 10866, -1000, 471, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5948, 5948, 5948, 5948, 32, 11085, -1000, 10866,
	9326, 9326, 9326, 9326, 9326, -1000, 750, 747, -1000, 730,
	727, 760, 11085, -1000, 517, 8445, 141, 646, -1000, 9545,
	-1000, -1000, 32, 611, 9326, 11085, -1000, -1000, 4503, 643,
	-103, 621, -1000, -79, -75, 6176, 133, -1000, -1000, -1000,
	-1000, 2739, 155, 279, -53, -1000, -1000, -1000, 659, -1000,
	659, 659, 659, 659, -26, -26, -26, -26, -1000, -1000,
	-1000, -1000, -1000, 698, 686, -1000, 659, 659, 659, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 684, 684, 684, 667, 667,
	703, -1000, 11085, -149, 413, 2991, 818, 2991, -1000, 885,
	885, -1000, -181, -1000, 396, -1000, 11085, -1000, -1000, 11085,
	2991, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 232, -1000, -1000, -1000,
	-1000, 769, 6641, 6641, 4251, 6641, -1000, -1000, -1000, 796,
	-1000, 829, 840, -1000, 781, 780, 5948, -1000, -1000, 158,
	187, -1000, -1000, 389, -1000, -1000, -1000, -1000, 118, 646,
	-1000, 1913, -1000, -1000, -1000, -1000, 308, 7097, 7097, 7097,
	1595, 1913, 1842, 303, 1292, 134, 257, 257, 132, 132,
	132, 132, 132, 645, 645, -1000, -1000, -1000, 471, -1000,
	-1000, -1000, 471, 5948, 631, -1000, -1000, 6641, -1000, 471,
	505, 505, 362, 366, 679, -1000, 116, 677, 505, 5948,
	210, -1000, 6641, 471, -1000, 505, 471, 505, 505, 656,
	646, -1000, 649, -1000, 191, 891, 683, 711, 742, -1000,
	-1000, -1000, -1000, 737, -1000, 728, -1000, -1000, -1000, -1000,
	-1000, 90, 86, 85, 10647, -1000, 860, 9326, 594, -1000,
	-1000, 621, -103, -81, -1000, -1000, -1000, 196, -1000, 409,
	618, 2487, -1000, -1000, -1000, -1000, -1000, -1000, 673, 805,
	175, 173, 406, -1000, -1000, 797, -1000, 233, -55, -1000,
	-1000, 316, -26, -26, -1000, -1000, 133, 787, 133, 133,
	133, 357, 357, -1000, -1000, -1000, -1000, 315, -1000, -1000,
	-1000, 273, -1000, 710, 10647, 2991, -1000, 3999, -1000, -1000,
	-1000, -1000, -1000, 709, -1000, -1000, -1000, 708, 404, -1000,
	392, 264, 167, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 31, -1000, 2991, -1000, 230, 11085,
	11085, 762, 196, 196, 114, -1000, -1000, 11085, -1000, -1000,
	-1000, -1000, 620, -1000, -1000, -1000, 3243, 5948, -1000, 1595,
	1913, 1823, -1000, 7097, 7097, -1000, -1000, 505, 5948, 196,
	-1000, -1000, -1000, 50, 294, 50, 7097, 7097, 4251, 7097,
	7097, -141, 612, 206, -1000, 6641, 393, -1000, -1000, -1000,
	-1000, -1000, 707, 10866, 646, -1000, 8221, 10647, 841, 10866,
	6641, 6641, -1000, -1000, 6641, 672, -1000, 6641, -1000, -1000,
	-1000, 646, 646, 646, 476, -1000, 841, 594, -1000, -1000,
	-1000, -87, -111, -1000, -1000, 2739, -1000, 2739, 10647, -1000,
	395, 394, -1000, -1000, 685, 78, -1000, -1000, -1000, 543,
	133, 133, -1000, 176, -1000, -1000, -1000, 501, -1000, 499,
	615, 487, 11085, -1000, -1000, 614, -1000, 188, 11085, 11085,
	21, -1000, -1000, -1000, 10647, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10647, 11085, -1000,
	-1000, -1000, -1000, -1000, 10647, -1000, -1000, 352, 6641, -1000,
	-1000, -1000, 3999, -1000, 860, 9326, -1000, -1000, 471, -1000,
	7097, 1913, 1913, -1000, -1000, 471, 659, 659, -1000, 659,
	667, -1000, 659, -7, 659, -9, 471, 471, 1728, 1791,
	-1000, 1532, 1772, 646, -138, -1000, 196, 6641, -1000, 811,
	549, 562, -1000, -1000, 5720, 471, 481, 112, 476, 837,
	-1000, 196, 196, 196, 10647, 196, 10647, 10647, 10647, 7997,
	10647, 837, -1000, -1000, -1000, -1000, 2487, -1000, 474, -1000,
	659, -1000, -1000, -49, 867, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -26, 351, -26, 260,
	-1000, 252, 2991, 3999, 2739, 834, 833, -1000, -1000, 647,
	-1000, -1000, -1000, -1000, 813, -1000, 196, 856, 563, -1000,
	1913, -1000, -1000, 98, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7097, 7097, -1000, 7097, 7097, 7097, 471,
	327, 196, 804, -1000, 646, -1000, -1000, 658, 10647, 10647,
	-1000, -1000, 470, -1000, 448, 448, 448, 141, -1000, -1000,
	123, 10647, -1000, 144, -1000, -115, 133, -1000, 133, 535,
	488, -1000, -1000, -1000, -177, -179, 10647, 646, 853, 839,
	-1000, -1000, 1702, 1702, 1702, 1702, 30, -1000, -1000, 865,
	-1000, 646, -1000, 701, 109, -1000, 10647, -1000, -1000, -1000,
	-1000, -1000, 123, -1000, 371, 171, 324, -1000, 237, 801,
	-1000, 800, -1000, -1000, -1000, -1000, -1000, -161, -163, 422,
	29, -1000, 6641, 6641, -1000, -1000, -1000, -1000, 471, 55,
	-154, 10866, 562, 471, 10647, -1000, -1000, -1000, 251, -1000,
	-1000, -1000, 321, -1000, -1000, -173, -173, 680, 417, -1000,
	10647, 196, 551, -1000, 761, -146, -157, 550, -1000, -1000,
	-1000, -1000, 3747, 368, 365, 3747, -149, -1000, 29, 779,
	-1000, 757, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26, -151, 24, -155, 646, -162, 6869, -1000,
	1702, 471, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1101, 18, 537, 1097, 1096, 1095, 1093, 1092, 1091,
	1090, 1089, 1087, 1086, 1084, 1077, 1074, 1073, 1072, 1071,
	1070, 1068, 1067, 1066, 133, 1065, 1064, 1061, 59, 1060,
	73, 1059, 1058, 29, 263, 42, 40, 34, 1055, 102,
	96, 89, 1054, 46, 1052, 1051, 76, 1050, 57, 1049,
	1048, 1078, 1047, 1046, 15, 33, 1043, 1042, 1041, 1040,
	72, 386, 1037, 1036, 1035, 1034, 1032, 1031, 47, 9,
	12, 11, 20, 1030, 119, 14, 1029, 49, 1028, 1027,
	1026, 1021, 41, 1016, 53, 1009, 36, 48, 1008, 17,
	67, 24, 37, 8, 74, 55, 1006, 30, 58, 44,
	1004, 1003, 407, 1001, 998, 997, 994, 993, 992, 165,
	413, 987, 983, 981, 979, 1, 0, 921, 235, 61,
	977, 976, 973, 1417, 60, 69, 32, 972, 39, 178,
	28, 971, 967, 25, 965, 964, 959, 956, 955, 954,
	953, 65, 951, 950, 948, 27, 13, 946, 945, 54,
	23, 944, 943, 942, 45, 56, 941, 71, 937, 929,
	928, 926, 26, 22, 924, 16, 923, 10, 922, 920,
	4, 918, 21, 915, 2, 914, 5, 43, 913, 912,
	6, 911, 909, 907, 7, 52, 906, 905, 50, 3,
	904, 896, 79,
}
var yyR1 = [...]int{

	0, 186, 187, 187, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 190,
	190, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 131, 131,
	178, 178, 181, 182, 179, 180, 180, 180, 183, 183,
	185, 185, 185, 184, 184, 184, 11, 11, 11, 11,
	11, 11, 11, 11, 176, 176, 175, 174, 174, 173,
	173, 172, 16, 159, 160, 160, 160, 155, 134, 134,
	134, 134, 137, 137, 135, 135, 135, 135, 135, 135,
	135, 136, 136, 136, 136, 136, 138, 138, 138, 138,
	138, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 140, 140, 140, 140,
	140, 140, 140, 140, 154, 154, 141, 141, 149, 149,
	150, 150, 150, 147, 147, 148, 148, 151, 151, 151,
	142, 142, 142, 142, 142, 142, 142, 144, 144, 152,
	152, 145, 145, 145, 146, 146, 153, 153, 153, 153,
	153, 143, 143, 156, 156, 168, 168, 167, 167, 167,
	158, 158, 164, 164, 164, 164, 164, 157, 157, 166,
	166, 165, 161, 161, 161, 162, 162, 162, 163, 163,
	163, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 171, 169, 169, 170, 170, 13, 14, 14, 14,
	14, 14, 15, 15, 17, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 107, 107,
	104, 104, 105, 105, 106, 106, 106, 108, 108, 108,
	132, 132, 132, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 191, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 120, 120, 120, 119,
	119, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 127, 127, 126, 126,
	126, 125, 125, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	103, 103, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 192, 192, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 130, 130, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	92, 92, 70, 70, 72, 72, 71, 73, 93, 93,
	97, 94, 94, 98, 98, 98, 96, 96, 96, 122,
	122, 122, 101, 101, 109, 109, 110, 110, 102, 102,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	112, 112, 112, 113, 113, 114, 114, 114, 121, 121,
	117, 117, 118, 118, 123, 123, 124, 124, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 188, 189,
	128, 129, 129, 129,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 6, 1, 1, 1, 1, 1, 1, 10, 10,
	1, 1, 1, 0, 2, 2, 2, 8, 4, 6,
	5, 5, 5, 4, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 4, 1, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 2, 2, 2, 2, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	3, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -186, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 140, 116, 133, 49, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -188, 8, 237,
	53, -187, 260, -82, 15, -26, 5, -24, -191, -24,
	-24, -24, -24, -24, -159, 53, -114, 121, 70, 148,
	229, 118, -178, 119, 125, -117, 147, 251, 56, -116,
	245, 152, 165, 159, 186, 178, 176, 179, 216, 65,
	155, 225, 136, 174, 170, 168, 27, 191, 250, 169,
	131, 130, 192, 196, 217, 163, 164, 219, 190, 132,
	32, 247, 34, 144, 220, 194, 189, 185, 188, 162,
	184, 38, 198, 197, 199, 215, 181, 171, 18, 223,
	139, 142, 193, 195, 126, 146, 249, 221, 167, 143,
	138, 224, 156, 218, 227, 37, 203, 161, 129, 153,
	150, 182, 145, 172, 173, 187, 160, 183, 154, 140,
	226, 204, 259, 180, 177, 151, 149, 208, 209, 210,
	211, 248, 222, 175, 205, -102, 121, 123, 119, 119,
	120, 121, 229, 118, 119, -51, -123, 56, -116, 147,
	121, 148, 119, 106, 179, 112, 206, 120, 32, 146,
	-132, 119, -104, 149, 208, 209, 210, 211, 56, 218,
	217, 212, -123, 154, -128, -128, -128, -128, -128, -2,
	-86, 17, 16, -5, -3, -188, 6, 20, 21, -30,
	39, 40, -25, -36, 97, -37, -123, -56, 72, -61,
	29, 56, -116, 23, -60, -57, -75, -73, -74, 106,
	107, 95, 96, 103, 73, 108, -65, -63, -64, -66,
	58, 57, 66, 59, 60, 61, 62, 67, 68, 69,
	-117, -71, -188, 43, 44, 238, 239, 240, 241, 244,
	242, 75, 33, 228, 236, 235, 234, 232, 233, 230,
	231, 124, 229, 101, 237, -102, -39, -40, -41, -42,
	-53, -74, -188, -51, 11, -46, -51, -94, -131, 154,
	-98, 218, 217, -118, -96, -117, -115, 216, 179, 215,
	117, 71, 22, 24, 201, 74, 106, 16, 75, 105,
	238, 112, 47, 230, 231, 228, 240, 241, 229, 206,
	29, 10, 25, 134, 21, 99, 114, 78, 79, 137,
	23, 135, 69, 19, 50, 11, 13, 14, 124, 123,
	90, 120, 45, 8, 108, 26, 87, 41, 28, 43,
	88, 17, 232, 233, 31, 244, 141, 101, 48, 35,
	72, 67, 51, 70, 15, 46, 89, 115, 237, 44,
	118, 6, 243, 30, 133, 42, 119, 207, 77, 122,
	68, 5, 125, 9, 49, 52, 234, 235, 236, 33,
	76, 12, -160, -155, 56, 120, -51, 237, -117, -110,
	124, -110, -183, -179, 56, -110, 80, 119, -51, -51,
	-109, 124, 56, -109, -109, -109, -51, 109, -51, 56,
	30, 229, 56, 146, 119, 147, 121, -129, -188, -118,
	-129, -129, -129, 150, 151, -129, -105, 213, 51, -129,
	-189, 55, -87, 19, 31, -37, -123, -83, -84, -37,
	-82, -2, -24, 35, -28, 21, 64, 11, -120, 71,
	70, 87, -119, 22, -117, 58, 109, -37, -58, 90,
	72, 88, 89, 74, 92, 91, 102, 95, 96, 97,
	98, 99, 100, 101, 93, 94, 105, 80, 81, 82,
	83, 84, 85, 86, -103, -188, -74, -188, 110, 111,
	-61, -61, -61, -61, -61, -61, -61, -188, -2, -69,
	-37, -188, -188, -188, -188, -188, -188, -188, -188, -188,
	-78, -37, -188, -192, -188, -192, -192, -192, -192, -192,
	-192, -192, -188, -188, -188, -188, -52, 26, -51, 30,
	54, -47, -49, -48, -50, 41, 45, 47, 42, 43,
	44, 48, -127, 22, -39, -188, -126, 142, -125, 22,
	-123, 58, -51, -46, -190, 54, 11, 52, 54, -94,
	154, -95, -99, 219, 221, 80, -122, -117, 58, 29,
	30, 55, 54, -134, -137, -139, -138, -140, -135, -136,
	176, 177, 106, 180, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 30, 136, 172, 173, 174, 175,
	192, 193, 194, 195, 196, 197, 198, 199, 159, 160,
	161, 162, 163, 164, 165, 167, 168, 169, 170, 171,
	56, -129, 121, -176, 52, 56, 72, 56, -129, 256,
	252, -51, -181, 56, -51, -129, 122, -51, 23, 51,
	-51, 56, 56, -124, -123, -115, -129, -129, -129, -129,
	-129, -129, -129, -129, -129, -129, -107, 207, 214, -51,
	9, 90, 54, 18, 109, 54, -85, 24, 25, -86,
	-189, -30, -62, -117, 59, 62, -29, 42, -51, -37,
	-37, -67, 67, 72, 68, 69, -119, 97, -124, -118,
	-115, -61, -68, -71, -74, 63, 90, 88, 89, 74,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -130, 56, 58, 56, -60,
	-60, -117, -35, 21, -34, -36, -189, 54, -189, -2,
	-34, -34, -37, -37, -75, -117, -123, -75, -34, -28,
	-76, -77, 76, -75, -189, -34, -35, -34, -34, -90,
	142, -51, -93, -97, -75, -40, -41, -41, -40, -41,
	41, 41, 41, 46, 41, 46, 41, -48, -123, -189,
	-54, 49, 123, 50, -188, -125, -90, 52, -39, -51,
	-98, -95, 54, 220, 222, 223, 51, -37, -146, 105,
	-161, -162, -163, -118, 58, 59, -155, -156, -164, 126,
	129, 125, -157, 120, 28, -151, 67, 72, -147, 204,
	-141, 53, -141, -141, -141, -141, -145, 179, -145, -145,
	-145, 53, 53, -141, -141, -141, -149, 53, -149, -149,
	-150, 53, -150, -121, 52, -51, -174, 248, -175, 56,
	-129, 23, -129, -185, 8, 9, 10, -185, 258, -111,
	117, 114, 115, -171, 113, 201, 179, 65, 29, 15,
	238, 142, 259, 56, 143, -51, -51, -129, -106, 11,
	90, 37, -37, -37, -124, -84, -87, -101, 19, 11,
	33, 33, -34, 67, 68, 69, 109, -188, -68, -61,
	-61, -61, -33, 137, 71, -189, -189, -34, 54, -37,
	-189, -189, -189, 54, 52, 22, 54, 11, 109, 54,
	11, -189, -34, -79, -77, 78, -37, -189, -189, -189,
	-189, -189, -59, 30, 33, -2, -188, -188, -55, 54,
	12, 80, -44, -43, 51, 52, -45, 51, -43, 41,
	41, 120, 120, 120, -91, -117, -55, -39, -55, -99,
	-100, 224, 221, 227, 56, 54, -163, 80, 53, 28,
	-157, -157, 56, 56, -142, 29, 67, -148, 205, 59,
	-145, -145, -146, 30, -146, -146, -146, -154, 58, -154,
	59, 59, 51, -117, -129, -173, -172, -118, 51, 51,
	-182, 56, -128, -177, 148, 127, 128, 131, 130, 56,
	120, 28, 126, 129, 142, 125, -177, 148, -112, -113,
	122, 22, 120, 28, 142, -129, -108, 88, 12, -123,
	-123, 38, 109, -51, -38, 11, 97, -118, -35, -33,
	71, -61, -61, -189, -36, -133, 106, 176, 136, 174,
	170, 190, 181, 203, 172, 204, -130, -133, -61, -61,
	-118, -61, -61, 245, -82, 79, -37, 77, -92, 51,
	-93, -70, -72, -71, -188, -2, -88, -117, -91, -82,
	-97, -37, -37, -37, 53, -37, -188, -188, -188, -189,
	54, -82, -55, 221, 225, 226, -162, -163, -166, -165,
	-117, 56, 56, -144, 51, 58, 59, 60, 67, 228,
	66, 55, -146, -146, 56, 106, 55, 54, 55, 54,
	55, 54, -51, 54, 80, -51, -51, 147, -128, -117,
	-128, -117, -51, -128, -117, 58, -37, -55, -39, -189,
	-61, -189, -141, -141, -141, -150, -141, 164, -141, 164,
	-189, -189, -189, 54, 19, -189, 54, 19, -188, -32,
	243, -37, 27, -92, 54, -189, -189, -189, 54, 109,
	-189, -86, -89, -117, -89, -89, -89, -126, -117, -86,
	55, 54, -141, -152, 201, 9, -145, 58, -145, 59,
	59, -129, -172, -163, 19, 19, 53, 26, -80, 13,
	-145, 56, -61, -61, -61, -61, -61, -189, 58, 28,
	-72, 33, -2, -188, -117, -117, 54, 55, -189, -189,
	-189, -54, -168, -167, 52, 132, 65, -165, -153, 126,
	28, 125, 228, -146, -146, 55, 55, 257, 257, -89,
	-188, -81, 14, 16, -189, -189, -189, -189, -31, 90,
	248, 9, -70, -2, 109, -117, -167, 56, -158, 80,
	58, -143, 65, 28, 28, 253, 253, 55, -169, -170,
	142, -37, -69, -189, 246, 48, 249, -93, -189, -117,
	59, 58, -184, 254, 255, -184, -176, -189, 54, -117,
	38, 247, 250, -180, 56, -116, -115, 56, 56, -180,
	-174, -170, 33, 38, 144, 248, 145, 249, -188, 250,
	-61, 141, -189, -189,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 525, 0, 294, 294, 294, 294, 294, 294, 0,
	595, 578, 0, 0, 0, 0, -2, 284, 285, 0,
	287, 288, 800, 800, 800, 800, 800, 0, 33, 34,
	798, 1, 3, 533, 0, 0, 298, 301, 296, 0,
	578, 0, 0, 0, 76, 0, 0, 787, 0, 788,
	576, 576, 0, 576, 596, 597, -2, 0, 600, 601,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 780,
	781, 782, 783, 784, 785, 786, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 0, 0, 579, 0, 574,
	0, 574, 574, 574, 0, 243, 365, 604, 605, 779,
	787, 788, 0, 0, 0, 0, 801, 801, 801, 801,
	0, 801, 272, 261, 263, 264, 265, 266, 801, 281,
	282, 271, 283, 286, 289, 290, 291, 292, 293, 27,
	537, 0, 0, 525, 29, 0, 294, 299, 300, 304,
	302, 303, 295, 0, 312, 316, 0, 373, 0, 378,
	380, -2, -2, 0, 415, 416, 417, 418, 419, 0,
	0, 0, 0, 0, 0, 0, 442, 443, 444, 445,
	510, 511, 512, 513, 514, 515, 516, 517, 382, 383,
	507, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 498, 0, 472, 472, 472, 472, 472, 472, 472,
	472, 0, 0, 0, 0, 0, 0, 323, 325, 326,
	327, 346, 0, 348, 0, 0, 41, 45, 0, 778,
	561, -2, -2, 0, 0, 602, 603, -2, 707, -2,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 0, 94, 0, 0, 801, 0, 84, 0,
	0, 0, 801, 0, 64, 0, 0, 0, 801, 0,
	0, 0, 0, 0, 0, 0, 242, 0, 244, 801,
	801, 801, 801, 801, 801, 801, 801, 253, 802, 803,
	254, 255, 256, 801, 801, 258, 0, 273, 0, 267,
	28, 799, 22, 0, 0, 534, 0, 526, 527, 530,
	533, 27, 301, 0, 306, 305, 297, 0, 313, 0,
	0, 0, 317, 0, 319, 320, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 401, 402,
	403, 404, 405, 406, 379, 0, 393, 0, 0, 0,
	435, 436, 437, 438, 439, 440, 0, 308, 27, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 499, 0, 464, 0, 465, 466, 467, 468, 469,
	470, 471, 0, 308, 0, 0, 43, 0, 364, 0,
	0, 0, 0, 0, 0, 353, 0, 0, 356, 0,
	0, 0, 0, 347, 0, 0, 367, 751, 349, 0,
	351, 352, -2, 0, 0, 0, 39, 40, 0, 46,
	778, 48, 49, 0, 0, 0, 174, 569, 570, 571,
	567, 202, 0, 157, 153, 99, 100, 101, 146, 103,
	146, 146, 146, 146, 171, 171, 171, 171, 129, 130,
	131, 132, 133, 0, 0, 116, 146, 146, 146, 120,
	136, 137, 138, 139, 140, 141, 142, 143, 104, 105,
	106, 107, 108, 109, 110, 148, 148, 148, 150, 150,
	598, 78, 0, 87, 0, 801, 0, 801, 83, 0,
	0, 92, 0, 62, 0, 218, 0, 237, 575, 0,
	801, 240, 241, 366, 606, 607, 245, 246, 247, 248,
	249, 250, 251, 252, 257, 260, 274, 268, 269, 262,
	538, 0, 0, 0, 0, 0, 529, 531, 532, 537,
	30, 304, 0, 518, 0, 0, 0, 307, 25, 374,
	375, 377, 394, 0, 396, 398, 318, 314, 0, 508,
	-2, 384, 385, 409, 410, 411, 0, 0, 0, 0,
	407, 389, 0, 420, 421, 422, 423, 424, 425, 426,
	427, 428, 429, 430, 431, 434, 483, 484, 0, 432,
	433, 441, 0, 0, 309, 310, 412, 0, 556, 27,
	0, 0, 0, 0, 0, 507, 0, 0, 0, 0,
	505, 502, 0, 0, 473, 0, 0, 0, 0, 0,
	0, 363, 371, 558, 0, 324, 342, 344, 0, 339,
	354, 355, 357, 0, 359, 0, 361, 362, 328, 329,
	330, 0, 0, 0, 0, 350, 371, 0, 371, 42,
	562, 47, 0, 0, 52, 53, 563, 564, 565, 0,
	93, 203, 205, 208, 209, 210, 95, 96, 0, 0,
	0, 0, 0, 197, 198, 160, 158, 0, 155, 154,
	102, 0, 171, 171, 123, 124, 174, 0, 174, 174,
	174, 0, 0, 117, 118, 119, 111, 0, 112, 113,
	114, 0, 115, 0, 0, 801, 80, 0, 85, 86,
	81, 577, 82, 0, 70, 71, 72, 0, 0, 800,
	0, 0, 590, 219, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 589, 0, 236, 801, 239, 277, 0,
	0, 0, 535, 536, 0, 528, 23, 0, 572, 573,
	519, 520, 321, 395, 397, 399, 0, 308, 386, 407,
	390, 0, 387, 0, 0, 381, 446, 0, 0, 414,
	-2, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 0, 503, 0, 0, 463, 474, 475,
	476, 477, 550, 0, 0, -2, 0, 0, 525, 0,
	0, 0, 336, 343, 0, 0, 337, 0, 338, 358,
	360, 0, 0, 0, 0, 334, 525, 371, 38, 50,
	51, 0, 0, 57, 175, 0, 206, 0, 0, 192,
	0, 0, 195, 196, 167, 0, 159, 98, 156, 0,
	174, 174, 125, 0, 126, 127, 128, 0, 144, 0,
	0, 0, 0, 599, 79, 88, 89, 0, 0, 0,
	0, 63, 211, 800, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 800, 0, 0, 800,
	591, 592, 593, 594, 0, 238, 259, 0, 0, 275,
	276, 539, 0, 24, 371, 0, 315, 509, 0, 388,
	0, 408, 391, 447, 311, 0, 146, 146, 488, 146,
	150, 491, 146, 493, 146, 496, 0, 0, 0, 0,
	508, 0, 0, 0, 500, 462, 506, 0, 31, 0,
	550, 540, 552, 554, 0, 27, 0, 546, 0, 533,
	559, 372, 560, 340, 0, 345, 0, 0, 0, 348,
	0, 533, 37, 54, 55, 56, 204, 207, 0, 199,
	146, 193, 194, 169, 0, 161, 162, 163, 164, 165,
	166, 147, 121, 122, 172, 173, 171, 0, 171, 0,
	151, 0, 801, 0, 0, 0, 0, 61, 212, 0,
	213, 215, 216, 217, 0, 278, 279, 521, 322, 448,
	392, 451, 485, 171, 489, 490, 492, 494, 495, 497,
	453, 452, 454, 0, 0, 457, 0, 0, 0, 0,
	0, 504, 0, 32, 0, 555, -2, 0, 0, 0,
	44, 35, 0, 332, 0, 0, 0, 367, 335, 36,
	184, 0, 201, 176, 170, 0, 174, 145, 174, 0,
	0, 77, 90, 91, 0, 0, 0, 0, 523, 0,
	486, 487, 0, 0, 0, 0, 478, 461, 501, 0,
	553, 0, -2, 0, 548, 547, 0, 341, 368, 369,
	370, 331, 183, 185, 0, 190, 0, 200, 181, 0,
	178, 180, 168, 134, 135, 149, 152, 0, 0, 0,
	0, 26, 0, 0, 455, 456, 458, 459, 0, 0,
	0, 0, 543, 27, 0, 333, 186, 187, 0, 191,
	189, 97, 0, 177, 179, 73, 73, 84, 0, 232,
	0, 524, 522, 460, 0, 0, 0, 551, -2, 549,
	188, 182, 0, 0, 0, 0, 87, 231, 0, 0,
	479, 0, 482, 68, 65, 66, 67, 74, 75, 69,
	214, 233, 0, 480, 0, 0, 0, 0, 0, 481,
	0, 0, 234, 235,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 260,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:313
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:318
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:319
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:346
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:354
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:358
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:364
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:377
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:381
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:398
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:410
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:432
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:438
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:442
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:451
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:452
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:460
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:465
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:469
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:475
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:493
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:497
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:507
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:517
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:521
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:545
		{
			yyVAL.definer = &Definer{}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:549
		{
			yyVAL.definer = &Definer{
				User: string(yyDollar[3].str),
				Host: string(yyDollar[5].str),
			}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:569
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:577
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 68:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:583
		{
			yyVAL.trigger = &Trigger{
				Name:      yyDollar[1].str,
				IsBefore:  true,
				Event:     string(yyDollar[3].bytes),
				Table:     yyDollar[5].tableName,
				IsPrecede: yyDollar[9].trigger.IsPrecede,
				Related:   yyDollar[9].trigger.Related,
				Body:      yyDollar[10].str,
			}
		}
	case 69:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:595
		{
			yyVAL.trigger = &Trigger{
				Name:      yyDollar[1].str,
				IsBefore:  false,
				Event:     string(yyDollar[3].bytes),
				Table:     yyDollar[5].tableName,
				IsPrecede: yyDollar[9].trigger.IsPrecede,
				Related:   yyDollar[9].trigger.Related,
				Body:      yyDollar[10].str,
			}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:613
		{
			yyVAL.trigger = &Trigger{IsPrecede: false, Related: ""}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:614
		{
			yyVAL.trigger = &Trigger{IsPrecede: false, Related: string(yyDollar[2].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:615
		{
			yyVAL.trigger = &Trigger{IsPrecede: true, Related: string(yyDollar[2].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:619
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:624
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:629
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:637
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:645
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:649
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:653
		{
			// trigger
			yyVAL.statement = &DDL{Action: CreateTrggerStr, Definer: yyDollar[2].definer, Trigger: yyDollar[3].trigger}
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:659
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:663
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:674
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:679
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:685
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:690
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:696
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:702
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:709
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:716
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:721
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:725
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:731
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:950
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:955
		{
			yyVAL.optVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:959
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:964
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:968
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:976
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:980
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:986
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:994
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:998
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1003
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1026
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1030
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1034
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1038
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1042
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1046
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1050
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1055
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1059
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1064
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1073
		{
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1077
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1081
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1086
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1095
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1099
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1103
		{
			yyVAL.colKeyOpt = colKey
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1116
		{
			yyVAL.optVal = nil
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1130
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1146
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1150
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1165
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1179
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1183
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1187
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1203
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1207
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1213
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1218
		{
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1222
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1226
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1234
		{
			yyVAL.str = yyDollar[1].str
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1262
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1266
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1270
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1274
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1287
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1302
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1307
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1311
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1330
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1336
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1340
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 234:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1346
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 235:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1350
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1362
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 238:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1370
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1375
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1387
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1457
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1465
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1519
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1525
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1529
		{
			yyVAL.str = "extended "
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.str = "full "
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1545
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1553
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1559
		{
			yyVAL.showFilter = nil
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1567
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1573
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1577
		{
			yyVAL.str = SessionStr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.str = GlobalStr
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &Begin{}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Begin{}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Commit{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Rollback{}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &OtherRead{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1640
		{
			setAllowComments(yylex, true)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1644
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1650
		{
			yyVAL.bytes2 = nil
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1654
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.str = UnionStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.str = UnionAllStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1668
		{
			yyVAL.str = UnionDistinctStr
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1673
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1681
		{
			yyVAL.str = SQLCacheStr
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1686
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.str = DistinctStr
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = StraightJoinHint
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1704
		{
			yyVAL.selectExprs = nil
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1708
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1714
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1718
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1724
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1728
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1732
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1736
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1741
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1749
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1761
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1765
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1785
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1789
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1793
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1799
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1803
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1809
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1819
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1836
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1840
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1844
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1848
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1856
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1860
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1866
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1868
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1871
		{
			yyVAL.empty = struct{}{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1876
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1884
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.str = JoinStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.str = JoinStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1905
		{
			yyVAL.str = JoinStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.str = StraightJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1917
		{
			yyVAL.str = LeftJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1921
		{
			yyVAL.str = LeftJoinStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1925
		{
			yyVAL.str = RightJoinStr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1929
		{
			yyVAL.str = RightJoinStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = NaturalJoinStr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1939
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1949
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1963
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.indexHints = nil
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1972
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1976
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1980
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1985
		{
			yyVAL.expr = nil
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1989
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1995
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1999
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2003
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2007
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2011
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2025
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2045
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2049
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2053
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2057
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2061
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2065
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2069
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2073
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2077
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.str = IsNullStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = IsNotNullStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = IsTrueStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2099
		{
			yyVAL.str = IsNotTrueStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.str = IsFalseStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2107
		{
			yyVAL.str = IsNotFalseStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.str = EqualStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.str = LessThanStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.str = GreaterThanStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.str = LessEqualStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.str = GreaterEqualStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.str = NotEqualStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2166
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2182
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2278
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 458:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 459:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 460:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 461:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2466
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = BooleanModeStr
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2478
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2482
		{
			yyVAL.str = QueryExpansionStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2488
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2492
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2528
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2532
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2540
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2544
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = nil
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2562
		{
			yyVAL.str = string("")
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2566
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2572
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2576
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2582
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = nil
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2601
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2605
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &NullVal{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2645
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2663
		{
			yyVAL.exprs = nil
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = nil
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2681
		{
			yyVAL.orderBy = nil
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2685
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2695
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2701
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2706
		{
			yyVAL.str = AscScr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.str = AscScr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = DescScr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2719
		{
			yyVAL.limit = nil
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2723
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2727
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2731
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2736
		{
			yyVAL.str = ""
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			yyVAL.str = ForUpdateStr
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2744
		{
			yyVAL.str = ShareModeStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2757
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2765
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2770
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2774
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 545:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2778
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2797
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2802
		{
			yyVAL.updateExprs = nil
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2806
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2812
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2816
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2832
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2848
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2852
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2858
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2868
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2874
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2878
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2882
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2889
		{
			yyVAL.bytes = []byte("charset")
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = &Default{}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2913
		{
			yyVAL.byt = 0
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.byt = 1
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2918
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2920
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2923
		{
			yyVAL.str = ""
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.str = IgnoreStr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2929
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2931
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2933
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2935
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2937
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2939
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2945
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2950
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2963
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2965
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2970
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2972
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2976
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2993
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2997
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3220
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			decNesting(yylex)
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3234
		{
			forceEOF(yylex)
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3239
		{
			forceEOF(yylex)
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			forceEOF(yylex)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
